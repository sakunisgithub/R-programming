\documentclass[11pt, a4paper]{article}

\usepackage[top = 1 in, bottom = 1 in, left = 1 in, right = 1 in ]{geometry}

\usepackage{amsmath, amssymb, amsfonts}
\usepackage{enumerate}
\usepackage{array}
\usepackage{multirow}
\usepackage{dingbat}
\usepackage{fontawesome5}
\usepackage{tasks}
\usepackage{bbding}
\usepackage{twemojis}
% how to use bull's eye ----- \scalebox{2.0}{\twemoji{bullseye}}
\usepackage{fontspec}
\usepackage{customdice}
% how to put dice face ------ \dice{2}

\title{MSMS 206 : Practical 01}
\author{Ananda Biswas}
\date{\today}

\newfontface\myfont{Myfont1-Regular.ttf}[LetterSpace=0.05em]
% how to use ---- {\setlength{\spaceskip}{1em plus 0.5em minus 0.5em} \fontsize{17}{20}\myfont --write text here-- \par}

\newfontface\cbfont{CaveatBrush-Regular.ttf}
% how to use --- \myfont --write text here--

\begin{document}

\maketitle


\scalebox{2.0}{\twemoji{bullseye}} \hspace{0.2cm} \textcolor{blue}{\textbf{Question :}} Perform $k-$means clustering for $\{2, 4, 10, 12, 3, 20, 30, 11, 25\}$ for $k = 2$. Assume $2$ and $4$ as initial cluster centroids.

\vspace{1cm}

\faArrowAltCircleRight[regular] \hspace{0.2cm} After a choice of initial centroids, the $k-$means clustering algorithm is as follows :

\begin{enumerate}[(1)]
\item calculate the distance of each data-point from each of the centroids
\item assign each of the data-points to its closest centroid
\item relocate the centroids to the average location of the data-points of similar group
\end{enumerate}

And we repeat this procedure until the assignments don't change after the centroid locations were recomputed.

<<>>=
df <- data.frame(x = c(2, 4, 10, 12, 3, 20, 30, 11, 25))
@

<<echo=FALSE, message=FALSE, warning=FALSE>>=
library(tidyverse)
@

<<echo=FALSE, message=FALSE, warning=FALSE, fig.show='hide'>>=
df %>%
  ggplot(aes(x = x, y = rep(0, length(x)))) +
  geom_hline(yintercept = 0, linewidth = 1) +
  geom_point(col = "red", size = 3.5) +
  labs(x = NULL, y = NULL) +
  scale_x_discrete(limits = seq(0, 25, by = 5)) +
  theme(panel.background = element_blank(),
        plot.background = element_rect(fill = "#dbfbfb"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 15))
@

<<echo=FALSE>>=
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_2_practicals\\rakesh_sir_practicals\\practical_01",
       width = 14,
       height = 2,
       device='png',
       dpi=1000,
       filename = "initial.png",
       units = "in",
       bg = "white")
@

Let us have a look at the data-points.

\begin{figure}[!htbp]
\centering
\includegraphics[scale = 0.4]{initial.png}
\end{figure}

Now We put the initial centroids.

<<echo=FALSE, message=FALSE, warning=FALSE, fig.show='hide'>>=
df %>%
  ggplot(aes(x = x, y = rep(0, length(x)))) +
  geom_hline(yintercept = 0, linewidth = 1) +
  geom_point(col = "red", size = 3.5) +
  labs(x = NULL, y = NULL) +
  scale_x_discrete(limits = seq(0, 25, by = 5)) +
  theme(panel.background = element_blank(),
        plot.background = element_rect(fill = "#dbfbfb"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 15)) +
  annotate("point", x = c(2, 4), y = c(0, 0), shape = 18, size = 7, color = "#740dbb")
@

<<echo=FALSE>>=
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_2_practicals\\rakesh_sir_practicals\\practical_01",
       width = 14,
       height = 2,
       device='png',
       dpi=1000,
       filename = "initial_with_centroid.png",
       units = "in",
       bg = "white")
@


\begin{figure}[!htbp]
\centering
\includegraphics[scale = 0.4]{initial_with_centroid.png}
\end{figure}

<<>>=
m <- dim(df)[1] # number of data-points
n <- dim(df)[2] # dimension of data-points

k <- 2 # number of clusters
@

<<>>=
X <- as.matrix(df)
@

Now we initialize the centroids as 2 and 4.

<<>>=
centroid <- matrix(data = c(2,
                            4),
                   nrow = k, ncol = 1, byrow = TRUE)
@

We now deploy our $k-$means clustering algorithm. We created a list named $\textit{iteration\_record()}$ for visualization of the process that will come later.

<<>>=
cluster <- c()

iteration_record <- list()

repeat{
  dist_mat <- matrix(0, nrow = m, ncol = k)
  
  for (i in 1:k) {
    d <- apply(X, 1, FUN = function(x) return(x - centroid[i, ]))
    
    d <- matrix(d, nrow = m, ncol = n, byrow = TRUE)
    
    dist_mat[,i] <- sqrt(diag( d %*% t(d) ) )
  }
  
  cluster <- apply(dist_mat, 1, FUN = function(x) return(which(x == min(x))[1]))
  
  new_centroid <- matrix(data = 0, nrow = k, ncol = n)
  
  for (i in 1:k) {
    new_centroid[i, ] <- mean(X[which(cluster == i), ])
  }
  
  iteration_record <- append(iteration_record, 
                             list(list(mat = cbind(X, dist_mat, cluster), 
                                       new_centroid = new_centroid)))
  
  if(any(centroid - new_centroid != 0)){
    centroid <- new_centroid
  } else{
    break
  }
}
@

\smallpencil {\setlength{\spaceskip}{1em plus 0.5em minus 0.5em} \fontsize{17}{20}\myfont The final clustering of the data-points is as follows : \par}

<<>>=
cluster
@

\newpage

<<>>=
length(iteration_record)
@

There were 5 iterations, we shall take a look at them one by one.

\vspace{1cm}

<<echo=FALSE>>=
for (i in 1:length(iteration_record)) {
  colnames(iteration_record[[i]]$mat) <- c("x", "distance_from_centroid_1", "distance_from_centroid_2", "cluster")
}
@


\leftpointright $\textbf{Iteration 1}$

<<>>=
iteration_record[[1]]$mat
@

<<echo=FALSE, message=FALSE, warning=FALSE, fig.show='hide'>>=
point_col = ifelse(iteration_record[[1]]$mat[ ,'cluster'] == 1, "red", "blue")

df %>%
  ggplot(aes(x = x, y = rep(0, length(x)))) +
  geom_hline(yintercept = 0, linewidth = 1) +
  geom_point(col = point_col, size = 3.5) +
  labs(x = NULL, y = NULL) +
  scale_x_discrete(limits = seq(0, 25, by = 5)) +
  theme(panel.background = element_blank(),
        plot.background = element_rect(fill = "#cbfddc"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 15)) +
  annotate("point", x = as.vector(iteration_record[[1]]$new_centroid), y = c(0, 0),  shape = 18, size = 7, color = c("red", "blue"))
@

<<echo=FALSE>>=
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_2_practicals\\rakesh_sir_practicals\\practical_01",
       width = 14,
       height = 2,
       device='png',
       dpi=1000,
       filename = "iter_1.png",
       units = "in",
       bg = "white")
@

The data-points along with relocated centroids are as follows :

\begin{figure}[!htbp]
\centering
\includegraphics[scale = 0.4]{iter_1.png}
\end{figure}


\leftpointright $\textbf{Iteration 2}$

<<>>=
iteration_record[[2]]$mat
@

<<echo=FALSE, message=FALSE, warning=FALSE, fig.show='hide'>>=
point_col = ifelse(iteration_record[[2]]$mat[ ,'cluster'] == 1, "red", "blue")

df %>%
  ggplot(aes(x = x, y = rep(0, length(x)))) +
  geom_hline(yintercept = 0, linewidth = 1) +
  geom_point(col = point_col, size = 3.5) +
  labs(x = NULL, y = NULL) +
  scale_x_discrete(limits = seq(0, 25, by = 5)) +
  theme(panel.background = element_blank(),
        plot.background = element_rect(fill = "#cbfddc"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 15)) +
  annotate("point", x = as.vector(iteration_record[[2]]$new_centroid), y = c(0, 0),  shape = 18, size = 7, color = c("red", "blue"))
@

<<echo=FALSE>>=
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_2_practicals\\rakesh_sir_practicals\\practical_01",
       width = 14,
       height = 2,
       device='png',
       dpi=1000,
       filename = "iter_2.png",
       units = "in",
       bg = "white")
@

The data-points along with relocated centroids are as follows :

\begin{figure}[!htbp]
\centering
\includegraphics[scale = 0.4]{iter_2.png}
\end{figure}




\newpage

\leftpointright $\textbf{Iteration 3}$

<<>>=
iteration_record[[3]]$mat
@

<<echo=FALSE, message=FALSE, warning=FALSE, fig.show='hide'>>=
point_col = ifelse(iteration_record[[3]]$mat[ ,'cluster'] == 1, "red", "blue")

df %>%
  ggplot(aes(x = x, y = rep(0, length(x)))) +
  geom_hline(yintercept = 0, linewidth = 1) +
  geom_point(col = point_col, size = 3.5) +
  labs(x = NULL, y = NULL) +
  scale_x_discrete(limits = seq(0, 25, by = 5)) +
  theme(panel.background = element_blank(),
        plot.background = element_rect(fill = "#cbfddc"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 15)) +
  annotate("point", x = as.vector(iteration_record[[3]]$new_centroid), y = c(0, 0),  shape = 18, size = 7, color = c("red", "blue"))
@

<<echo=FALSE>>=
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_2_practicals\\rakesh_sir_practicals\\practical_01",
       width = 14,
       height = 2,
       device='png',
       dpi=1000,
       filename = "iter_3.png",
       units = "in",
       bg = "white")
@

The data-points along with relocated centroids are as follows :

\begin{figure}[!htbp]
\centering
\includegraphics[scale = 0.4]{iter_3.png}
\end{figure}





\vspace{1cm}

\leftpointright $\textbf{Iteration 4}$

<<>>=
iteration_record[[4]]$mat
@

<<echo=FALSE, message=FALSE, warning=FALSE, fig.show='hide'>>=
point_col = ifelse(iteration_record[[4]]$mat[ ,'cluster'] == 1, "red", "blue")

df %>%
  ggplot(aes(x = x, y = rep(0, length(x)))) +
  geom_hline(yintercept = 0, linewidth = 1) +
  geom_point(col = point_col, size = 3.5) +
  labs(x = NULL, y = NULL) +
  scale_x_discrete(limits = seq(0, 25, by = 5)) +
  theme(panel.background = element_blank(),
        plot.background = element_rect(fill = "#cbfddc"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 15)) +
  annotate("point", x = as.vector(iteration_record[[4]]$new_centroid), y = c(0, 0),  shape = 18, size = 7, color = c("red", "blue"))
@

<<echo=FALSE>>=
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_2_practicals\\rakesh_sir_practicals\\practical_01",
       width = 14,
       height = 2,
       device='png',
       dpi=1000,
       filename = "iter_4.png",
       units = "in",
       bg = "white")
@

The data-points along with relocated centroids are as follows :

\begin{figure}[!htbp]
\centering
\includegraphics[scale = 0.4]{iter_4.png}
\end{figure}





\newpage

\leftpointright $\textbf{Iteration 5}$

<<>>=
iteration_record[[5]]$mat
@

<<echo=FALSE, message=FALSE, warning=FALSE, fig.show='hide'>>=
point_col = ifelse(iteration_record[[5]]$mat[ ,'cluster'] == 1, "red", "blue")

df %>%
  ggplot(aes(x = x, y = rep(0, length(x)))) +
  geom_hline(yintercept = 0, linewidth = 1) +
  geom_point(col = point_col, size = 3.5) +
  labs(x = NULL, y = NULL) +
  scale_x_discrete(limits = seq(0, 25, by = 5)) +
  theme(panel.background = element_blank(),
        plot.background = element_rect(fill = "#cbfddc"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 15)) +
  annotate("point", x = as.vector(iteration_record[[5]]$new_centroid), y = c(0, 0),  shape = 18, size = 7, color = c("red", "blue"))
@

<<echo=FALSE>>=
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_2_practicals\\rakesh_sir_practicals\\practical_01",
       width = 14,
       height = 2,
       device='png',
       dpi=1000,
       filename = "iter_5.png",
       units = "in",
       bg = "white")
@

The data-points along with relocated centroids are as follows :

\begin{figure}[!htbp]
\centering
\includegraphics[scale = 0.4]{iter_5.png}
\end{figure}

\smallpencil {\setlength{\spaceskip}{1em plus 0.5em minus 0.5em} \fontsize{17}{20}\myfont We notice that there is no change in location centroids from Iteration 4 to Iteration 5. So the process stops and we get our final set of clusters.\par}

\end{document}