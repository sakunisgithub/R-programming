\documentclass[11pt, a4paper]{article}

\usepackage[top=1 in, bottom = 1 in, left = 1 in, right = 1 in ]{geometry}

\usepackage{amsmath, amssymb, amsfonts}
\usepackage{enumerate}
\usepackage{hyperref}
\usepackage{dingbat}

\title{\textbf{MSMS 105 - Computing with R}}
\author{Ananda Biswas}
\date{}

\begin{document}

\maketitle

\tableofcontents

\newpage

<<r, echo = F>>=
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=70),tidy=TRUE)
@

\section{Basic Operations}

\smallpencil

<<>>=
x <- 1:10
y <- 1:9
x + y
@

Here observe that, $x$ and $y$ are of different lengths; still R does the sum and produces a Warning but not an Error. The rule is the shorter one will adjust its length by cyclically repeating its elements. \\

\hspace{1cm}The warning message says \textit{longer object length is not a multiple of shorter object length}. Be aware of the fact that, if two vectors are of different lengths, but length of the longer one is a perfect multiple of that of the shorter one, then R completes the operation by cyclical repetition and does not even generate a Warning. So one has to be CAUTIOUS in that case.
<<>>=
x <- 1:10
y <- 1:5
x + y
@

\flushleft{\smallpencil}

<<>>=
x <- 1:5
class(x)
y <- c(x, "a")
class(y)
@

\hspace{1cm} Observe that $x$ is of class \textit{integer}, but adding \textbf{``a"} makes vector $y$ of class \textit{character}. This is because vectors are collection of homogeneous elements and an integer can be converted to a character but the reverse is not possible.

<<>>=
x <- c(1, 2, 3, 4, 5)
class(x)
@

\hspace{1cm} Observe that, a vector generated by \textbf{:} operator is of class \textit{integer}, because \textbf{:} operator is used only to create sequence of integers. But a vector generated by \textbf{c()} is of class \textit{numeric}.

<<>>=
as.logical(14); as.logical(14.7)
as.numeric(TRUE); as.numeric(FALSE)
@


<<>>=
y <- c(x, TRUE, FALSE)
y
class(y)
@

Although integer to logical or numeric to logical conversion is possible, R makes vector $y$ with class \textit{numeric}.

\section{Implicit Looping}

\subsection{Vectorized Operations}

<<>>=
x <- 1:10
x + 14
x^2
@

\subsection{\textbf{\textit{apply} family of functions}}

<<>>=
head(iris)
@

\subsubsection{\textit{apply}} In \textit{apply}, the first argument is data; second argument is 1 or 2, 1 indicating rows and 2 indicating columns; the third argument is the function to be applied.
<<>>=
apply(iris[,1:4], 1, sum)
@

<<>>=
apply(iris[,1:4], 2, sum)
@

<<>>=
apply(iris[,1:4], 2, FUN = function(a){sum(a^2)}) # produces sum of square of all elements in a column
@

\subsubsection{\textit{lapply}} In \textit{lapply}, the first argument is a list (say $X$) and the second argument is a function. It returns a list of the same length of $X$, each element of which is the result of applying the function to the corresponding element of $X$. \\

\textit{lapply} stands for ``list apply".

<<>>=
mat1 <- matrix(data = rbinom(14, 25, prob = 0.5))
mat2 <- matrix(data = rbinom(24, 25, prob = 0.5))
mat3 <- matrix(data = rbinom(34, 25, prob = 0.5))
my_list <- list(mat1, mat2, mat3)

lapply(my_list, FUN = sum)
@

<<>>=
lapply(my_list, FUN = mean)

unlist(lapply(my_list, FUN = mean))
@

\section{\textit{break} statement}

<<>>=
for (i in 1:10) {
  ifelse(i == 6, break, print(i^2))
  # exits the loop when i is equal to 6
}
@

\section{\textit{next} statement}

<<>>=
for (i in 1:10) {
  ifelse(i == 6, next, print(i^2))
  # skips the printing job when i is equal to 6
}
@

\section{Explicit Looping by \textit{repeat}}

<<>>=
x <- 1:10

i <- 1

repeat{
  print(x[i] + 5)
  i <- i + 1
  if(i == length(x) + 1){
    break
  }
}
@


\section{S3 Classes, Objects and Methods}

We require \textit{sloop} library for \textit{otype()} function that returns type of a given object.
<<>>=
library(sloop)
@

<<>>=
a <- 14
otype(a)
@

<<>>=
b <- list(name = "Ananda", serial_no = 8, CUET_score = 146)
class(b) <- "student"
otype(b)
is.object(b)
@

$\bullet$ \textit{unclass()}
<<>>=
class(b)
b <- unclass(b)
class(b)
@

$\bullet$ Class Constructor
<<>>=
student <- function(n, sl, score){
  if(score > 300 || score < 0) stop("Score must be 0 to 300")
  
  new_object <- list(name = n, serial_no = sl, CUET_score = score)
  attr(new_object, "class") <- "student" # class(new_object) <- "student
  
  return(new_object)
}
@

<<>>=
student_1 <- student("Debarghya", 1, 146)
student_1
student_1$name; student_1$serial_no; student_1$CUET_score
@

<<>>=
otype(student_1)
@

<<>>=
isS3method("print.default")
@

<<>>=

@

\end{document}