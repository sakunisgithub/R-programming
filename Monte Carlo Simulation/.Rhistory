knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# n <- as.numeric(readline(prompt = "Enter the amount of random numbers = "))
n <- as.integer(params$amount_of_random_numbers)
numbers_1 <- c(seed_value_1)
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
# n <- as.numeric(readline(prompt = "Enter the amount of random numbers = "))
n <- as.integer(params$amount_of_random_numbers)
# seed_value_1 <- as.numeric(readline(prompt = "Enter the seed value for set 1 = "))
seed_value_1 <- as.integer(params$seed_value_1)
# seed_value_2 <- as.numeric(readline(prompt = "Enter the seed value for set 2 = "))
seed_value_2 <- as.integer(params$seed_value_2)
our_numbers <- standard_normal_numbers
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
standard_normal_numbers <- c()
length(standard_normal_numbers)
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
knit_with_parameters("D:/Programming Languages/R/Monte Carlo Simulation/generating_standard_normal_numbers.Rmd")
standard_normal_numbers <- c(sqrt((-2) * log(numbers_1[1])) * sin(2 * pi * numbers_2[1]))
# n <- as.numeric(readline(prompt = "Enter the amount of random numbers = "))
n <- as.integer(params$amount_of_random_numbers)
# seed_value_1 <- as.numeric(readline(prompt = "Enter the seed value for set 1 = "))
seed_value_1 <- as.integer(params$seed_value_1)
# seed_value_2 <- as.numeric(readline(prompt = "Enter the seed value for set 2 = "))
seed_value_2 <- as.integer(params$seed_value_2)
numbers_1 <- c(seed_value_1)
a = 21
b = 31
m = 100
for (i in 2:(n+1)) {
numbers_1 <- append(numbers_1, (a * numbers_1[i-1] + b) %% m, after = length(numbers_1))
}
knitr::opts_chunk$set(echo = TRUE)
n <- as.numeric(readline(prompt = "Enter the amount of random numbers = "))
seed_value_1 <- as.numeric(readline(prompt = "Enter the seed value for set 1 = "))
seed_value_2 <- as.numeric(readline(prompt = "Enter the seed value for set 2 = "))
numbers_1 <- c(seed_value_1)
a = 21
b = 31
m = 100
for (i in 2:(n+1)) {
numbers_1 <- append(numbers_1, (a * numbers_1[i-1] + b) %% m, after = length(numbers_1))
}
numbers_1 <- numbers_1 / max(numbers_1)
numbers_1 <- numbers_1[-1]
numbers_2 <- c(seed_value_2)
for (i in 2:(n+1)) {
numbers_2 <- append(numbers_2, (a * numbers_2[i-1] + b) %% m, after = length(numbers_2))
}
numbers_2 <- numbers_2 / max(numbers_2)
numbers_2 <- numbers_2[-1]
standard_normal_numbers <- c()
for (i in 1:length(numbers_1)) {
temp <- sqrt((-2) * log(numbers_1[i])) * sin(2 * pi * numbers_2[i])
standard_normal_numbers <- append(standard_normal_numbers, temp, after = length(standard_normal_numbers))
}
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers")
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 15)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 25)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 50)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 30)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 25)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 20)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 10)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 15)
print(length(standard_normal_numbers))
n <- as.numeric(readline(prompt = "Enter the amount of random numbers = "))
seed_value_1 <- as.numeric(readline(prompt = "Enter the seed value for set 1 = "))
seed_value_2 <- as.numeric(readline(prompt = "Enter the seed value for set 2 = "))
numbers_1 <- c(seed_value_1)
a = 21
b = 31
m = 100
for (i in 2:(n+1)) {
numbers_1 <- append(numbers_1, (a * numbers_1[i-1] + b) %% m, after = length(numbers_1))
}
numbers_1 <- numbers_1 / max(numbers_1)
numbers_1 <- numbers_1[-1]
numbers_2 <- c(seed_value_2)
for (i in 2:(n+1)) {
numbers_2 <- append(numbers_2, (a * numbers_2[i-1] + b) %% m, after = length(numbers_2))
}
numbers_2 <- numbers_2 / max(numbers_2)
numbers_2 <- numbers_2[-1]
standard_normal_numbers <- c()
for (i in 1:length(numbers_1)) {
temp <- sqrt((-2) * log(numbers_1[i])) * sin(2 * pi * numbers_2[i])
standard_normal_numbers <- append(standard_normal_numbers, temp, after = length(standard_normal_numbers))
}
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 15)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 15)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 25)
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 15)
n <- as.numeric(readline(prompt = "Enter the amount of random numbers = "))
seed_value_1 <- as.numeric(readline(prompt = "Enter the seed value for set 1 = "))
seed_value_2 <- as.numeric(readline(prompt = "Enter the seed value for set 2 = "))
numbers_1 <- c(seed_value_1)
a = 21
b = 31
m = 100
for (i in 2:(n+1)) {
numbers_1 <- append(numbers_1, (a * numbers_1[i-1] + b) %% m, after = length(numbers_1))
}
numbers_1 <- numbers_1 / max(numbers_1)
numbers_1 <- numbers_1[-1]
numbers_2 <- c(seed_value_2)
for (i in 2:(n+1)) {
numbers_2 <- append(numbers_2, (a * numbers_2[i-1] + b) %% m, after = length(numbers_2))
}
numbers_2 <- numbers_2 / max(numbers_2)
numbers_2 <- numbers_2[-1]
standard_normal_numbers <- c()
for (i in 1:length(numbers_1)) {
temp <- sqrt((-2) * log(numbers_1[i])) * sin(2 * pi * numbers_2[i])
standard_normal_numbers <- append(standard_normal_numbers, temp, after = length(standard_normal_numbers))
}
hist(standard_normal_numbers, main = "Histogram Plot of Generated N(0, 1) Random Numbers", breaks = 15)
