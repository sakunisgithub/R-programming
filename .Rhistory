theme_void() +
theme(legend.position = c(.85, .9)) +
theme(panel.background = element_rect(fill = "lightblue"))
df1 %>%
ggplot(aes(x = hole_size, y = Count, fill = Diagnosis)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.05, hole_size + 0.5)) +
scale_fill_manual(values = c("#28ED0C", "#F13A31")) +
theme_void() +
theme(legend.position = c(.85, .9)) +
theme(panel.background = element_rect(fill = "lightblue"))
df1 %>%
ggplot(aes(x = hole_size, y = Count, fill = Diagnosis)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.05, hole_size + 0.5)) +
scale_fill_manual(values = c("#28ED0C", "#F13A31")) +
theme_void() +
theme(legend.position = c(.85, .9)) +
theme(panel.background = element_rect(fill = "lightblue", colour = "red"))
wheat_data <- read.csv("D:\\data_sets\\doe_prac_q7_data.csv", stringsAsFactors = TRUE)
View(wheat_data)
dim(wheat_data)
names(wheat_data)
summary(wheat_data)
which(is.na(wheat_data$yield))
a <- which(wheat_data$row == "R3")
a
R <- sum(wheat_data$yield[a])
R
R <- sum(wheat_data$yield[a], na.rm = TRUE)
R
b <- which(wheat_data$column == "C4")
b
C <- sum(wheat_data$yield[b], na.rm = TRUE)
C
c <- which(wheat_data$treatment == "E")
c
T1 <- sum(wheat_data$yield[c], na.rm = TRUE)
T1
S <- sum(wheat_data$yield, na.rm = TRUE)
S
m <- 5
x_hat <- (m * (R + C + T1) - 2 * S) / ((m - 1) * (m-2))
x_hat
adjusted_wheat_data <- wheat_data
which(is.na(wheat_data$yield))
adjusted_wheat_data$yield[14] = x_hat
View(adjusted_wheat_data)
G <- sum(adjusted_wheat_data$yield)
G
CF <- G^2 / 25
CF
RSS <- sum(adjusted_wheat_data$yield^2)
RSS
TSS <- RSS - CF
TSS
library(tidyverse)
df1 <- adjusted_wheat_data %>%
group_by(row) %>%
summarise(row_total = sum(yield), row_total_sq = row_total^2)
View(df1)
df2 <- adjusted_wheat_data %>%
group_by(column) %>%
summarise(column_total = sum(yield), column_total_sq = column_total^2)
View(df2)
df3 <- adjusted_wheat_data %>%
group_by(treatment) %>%
summarise(treatment_total = sum(yield), treatment_total_sq = treatment_total^2)
View(df3)
sum(df1$row_total_sq)
sum(df2$column_total_sq)
sum(df3$treatment_total_sq)
SSrow <- sum(df1$row_total_sq) / 5 - CF
SSrow
SScolumn <- sum(df2$column_total_sq) / 5 - CF
SScolumn
SStreatments <- sum(df3$treatment_total_sq) / 5 - CF
SStreatments
adjustment_factor <- ( ((m - 1) * T1 + R + C - S) / ((m - 1) * (m - 2)) )^2
adjustment_factor
SStreatments_adjusted <- SStreatments - adjustment_factor
SStreatments_adjusted
SSE_adjusted <- TSS - SSrow - SScolumn - SStreatments_adjusted
SSE_adjusted
MSrow <- SSrow / 4
MSrow
MScolumn <- SScolumn / 4
MScolumn
MStreatments_adjusted <- SStreatments_adjusted / 4
MStreatments_adjusted
MSE_adjusted <- SSE_adjusted / 11
MSE_adjusted
MStreatments_adjusted / MSE_adjusted
qf(0.05, 4, 11, lower.tail = FALSE)
wheat_data <- read.csv("D:\\data_sets\\doe_prac_q7_data.csv", stringsAsFactors = TRUE)
View(wheat_data)
dim(wheat_data)
names(wheat_data)
summary(wheat_data)
which(is.na(wheat_data$yield))
a <- which(wheat_data$row == "R3")
a
R <- sum(wheat_data$yield[a], na.rm = TRUE)
R
b <- which(wheat_data$column == "C4")
b
C <- sum(wheat_data$yield[b], na.rm = TRUE)
C
c <- which(wheat_data$treatment == "E")
c
T1 <- sum(wheat_data$yield[c], na.rm = TRUE)
T1
S <- sum(wheat_data$yield, na.rm = TRUE)
S
m <- 5
x_hat <- (m * (R + C + T1) - 2 * S) / ((m - 1) * (m-2))
x_hat
x_hat <- round(x_hat, digits = 2)
x_hat
adjusted_wheat_data <- wheat_data
adjusted_wheat_data$yield[14] = x_hat
View(adjusted_wheat_data)
G <- sum(adjusted_wheat_data$yield)
G
CF <- G^2 / 25
CF
RSS <- sum(adjusted_wheat_data$yield^2)
RSS
TSS <- RSS - CF
TSS
library(tidyverse)
df1 <- adjusted_wheat_data %>%
group_by(row) %>%
summarise(row_total = sum(yield), row_total_sq = row_total^2)
View(df1)
251.71^2
df2 <- adjusted_wheat_data %>%
group_by(column) %>%
summarise(column_total = sum(yield), column_total_sq = column_total^2)
View(df2)
df3 <- adjusted_wheat_data %>%
group_by(treatment) %>%
summarise(treatment_total = sum(yield), treatment_total_sq = treatment_total^2)
View(df3)
sum(df1$row_total_sq)
sum(df2$column_total_sq)
sum(df3$treatment_total_sq)
SSrow <- sum(df1$row_total_sq) / 5 - CF
SSrow
SScolumn <- sum(df2$column_total_sq) / 5 - CF
SScolumn
SScolumn <- round(SScolumn, digits = 2)
SScolumn
SStreatments <- sum(df3$treatment_total_sq) / 5 - CF
SStreatments
SStreatments <- round(SStreatments, digits = 2)
SStreatments
adjustment_factor <- ( ((m - 1) * T1 + R + C - S) / ((m - 1) * (m - 2)) )^2
adjustment_factor
adjustment_factor <- round(adjustment_factor, digits = 2)
adjustment_factor
SStreatments_adjusted <- SStreatments - adjustment_factor
SStreatments_adjusted
SSE_adjusted <- TSS - SSrow - SScolumn - SStreatments_adjusted
SSE_adjusted
SSE_adjusted <- round(SSE_adjusted, digits = 2)
SSE_adjusted
TSS
MSrow <- SSrow / 4
MSrow
MScolumn <- SScolumn / 4
MScolumn
MStreatments_adjusted <- SStreatments_adjusted / 4
MStreatments_adjusted
MSE_adjusted <- SSE_adjusted / 11
MSE_adjusted
MStreatments_adjusted / MSE_adjusted
qf(0.05, 4, 11, lower.tail = FALSE)
our_data <- read.csv("D:\\data_sets\\doe_prac_q2_data.csv", stringsAsFactors = TRUE)
our_anova <- aov(yield ~ block + treatment, data = our_data)
summary(our_anova)
our_anova <- aov(yield ~ block + treatment + block:treatment, data = our_data)
summary(our_anova)
model.tables(our_anova)
our_data <- read.csv("D:\\data_sets\\doe_prac_q8_data.csv", stringsAsFactors = TRUE)
View(our_data)
str(our_data)
dim(our_data)
names(our_data)
summary(our_data)
str(our_data)
our_data$N_code <- as.factor(our_data$N_code)
our_data$S_code <- as.factor(our_data$S_code)
summary(our_data)
str(our_data)
summary(our_data)
our_data <- read.csv("D:\\data_sets\\doe_prac_q8_data.csv", stringsAsFactors = TRUE)
View(our_data)
dim(our_data)
names(our_data)
str(our_data)
our_data$N_code <- as.factor(our_data$N_code)
our_data$S_code <- as.factor(our_data$S_code)
str(our_data)
summary(our_data)
rbd_anova <- aov(response ~ block + treatment_combination, data = our_data)
summary(rbd_anova)
2_sq_fac
names(our_data)
two_sq_factorial_anova <- aov(response ~ factor_N * factor_S, data = our_data)
summary(two_sq_factorial_anova)
2583+35+759
two_sq_factorial_anova <- aov(response ~ block + factor_N * factor_S, data = our_data)
summary(two_sq_factorial_anova)
our_data$adjusted_response <- our_data$response - 100
View(our_data)
our_data$adjusted_response <- (our_data$response - 100) / 10
View(our_data)
our_data$adjusted_response <- our_data$response - 100
View(our_data)
G <- sum(our_data$adjusted_response)
G
CF <- G^2 / length(our_data$adjusted_response)
CF
G <- sum(our_data$response)
G
CF <- G^2 / length(our_data$adjusted_response)
CF
G <- sum(our_data$adjusted_response)
G
CF <- G^2 / length(our_data$adjusted_response)
CF
RSS <- sum(our_data$adjusted_response^2)
RSS
TSS <- RSS - CF
TSS
library(tidyverse)
df1 <- our_data %>%
group_by(block) %>%
summarise(block_total = sum(adjusted_response), block_total_sq = block_total^2)
View(df1)
df2 <- our_data %>%
group_by(treatment_combination) %>%
summarise(treatment_combination_total = sum(adjusted_response), treatment_combination_total_sq = treatment_combination_total^2)
View(df2)
sum(df1$block_total_sq)
sum(df2$treatment_combination_total_sq)
SSblocks <- sum(df1$block_total_sq) / 4 - CF
SSblocks
two_sq_factorial_anova <- aov(response ~ block + factor_N * factor_S, data = our_data)
summary(two_sq_factorial_anova)
SStreatments <- sum(df2$treatment_combination_total_sq) / 6 - CF
SStreatments
SSE <- TSS - SSblocks - SStreatments
SSE
install.packages('unrepx')
library(unrepx)
yates(our_data$adjusted_response, labels = our_data$treatment_combination, sep = "")
?yates
install.packages('YatesAlgo.FactorialExp.SR')
library(YatesAlgo.FactorialExp.SR)
run.yates.algo(our_data$treatment_combination, df2$treatment_combination_total, n = 2, r = 6)
summary(two_sq_factorial_anova)
a <- df2$treatment_combination_total
a
c{i} <- c(1)
catt{i} <- c(1)
b[i] <- a[2*temp] - a[2*temp - 1]
for (i in 1:length(a)) {
if(i <= length(a) / 2){
b[i] <- a[2*i - 1] + a[2*i]
}
else{
temp <- length(a) / 2 - i
b[i] <- a[2*temp] - a[2*temp - 1]
}
}
b <- c()
for (i in 1:length(a)) {
if(i <= length(a) / 2){
b[i] <- a[2*i - 1] + a[2*i]
}
else{
temp <- length(a) / 2 - i
b[i] <- a[2*temp] - a[2*temp - 1]
}
}
for (i in 1:length(a)) {
if(i <= length(a) / 2){
b[i] <- a[2*i - 1] + a[2*i]
}
#else{
#temp <- length(a) / 2 - i
#b[i] <- a[2*temp] - a[2*temp - 1]
}
b
for (i in 1:length(a)) {
if(i <= length(a) / 2){
b[i] <- a[2*i - 1] + a[2*i]
}
else{
temp <- i - (length(a) / 2)
b[i] <- a[2*temp] - a[2*temp - 1]
}
}
b
63-120
a <- c(-10, -4, -10, 24)
a
b <- c()
for (i in 1:length(a)) {
if(i <= length(a) / 2){
b[i] <- a[2*i - 1] + a[2*i]
}
else{
temp <- i - (length(a) / 2)
b[i] <- a[2*temp] - a[2*temp - 1]
}
}
b
replicates <- 2
n <- 2
all_numbers <- c()
for (j in 1:n) {
for (i in 1:length(a)) {
if(i <= length(a) / 2){
b[i] <- a[2*i - 1] + a[2*i]
}
else{
temp <- i - (length(a) / 2)
b[i] <- a[2*temp] - a[2*temp - 1]
}
}
all_numbers <- append(all_numbers, b)
a <- b
}
all_numbers
my_df <- data.frame(treatment_combinations = our_data$treatment_combination, treatment_combination_total = df2$treatment_combination_total, run_1 = all_numbers[1:4], run_2 = all_numbers[5:8
]
my_df <- data.frame(treatment_combinations = our_data$treatment_combination, treatment_combination_total = df2$treatment_combination_total, run_1 = all_numbers[1:4], run_2 = all_numbers[5:8
my_df <- data.frame(treatment_combinations = our_data$treatment_combination, treatment_combination_total = df2$treatment_combination_total, run_1 = all_numbers[1:4], run_2 = all_numbers[5:8])
View(my_df)
my_df <- data.frame(treatment_combinations = unique(our_data$treatment_combination), treatment_combination_total = df2$treatment_combination_total, run_1 = all_numbers[1:4], run_2 = all_numbers[5:8])
View(my_df)
my_df <- data.frame(treatment_combinations = unique(our_data$treatment_combination), treatment_combination_total = df2$treatment_combination_total, run_1 = all_numbers[1:4], run_2 = all_numbers[5:8])
View(my_df)
library(glue)
glue(run, 1)
glue('run, 1')
glue('run_{i}')
for (i in 1:n) {
glue('run_{i}')
}
for (i in 1:n) {
glue('run_{i}')
}
glue('run_{i}')
glue('run_{i}') <- 10
f('run_{i}')
for (i in 1:n) {
f('run_{i}')
}
library(fstrings)
install.packages('fstrings')
library(fstrings)
install.packages('fstrings')
glue('run_{i}')
for (i in 1:n) {
glue('run_{i}')
}
for (i in 1:n) {
x <- glue('run_{i}')
x
}
x
for (i in 1:10) {
x <- glue('run_{i}')
x
}
x
for (i in 1:10) {
x <- glue('run_{i}')
print(x)
}
my_mat <- matrix(data <- all_numbers, nrow = length(a), ncol = n, byrow = FALSE)
my_mat
glue('my_1') <- 1
my_df <- data.frame(treatment_combinations = unique(our_data$treatment_combination), treatment_combination_total = df2$treatment_combination_total, my_mat)
View(my_df)
sprintf("run[%d]", 1:2)
a <- sprintf("run[%d]", 1:2)
a
a[1]
a <- c(-10, -4, -10, 24)
colnames(my_mat) <- sprintf("run[%d]", 1:2)
my_mat
my_df <- data.frame(treatment_combinations = unique(our_data$treatment_combination), treatment_combination_total = df2$treatment_combination_total, my_mat)
View(my_df)
new_num <- c()
colnames(my_mat) <- sprintf("run[%d]", 1:2)
my_mat
colnames(my_mat) <- sprintf("run-%d", 1:2)
my_mat
colnames(my_mat) <- sprintf("run_%d", 1:2)
my_mat
my_df <- data.frame(treatment_combinations = unique(our_data$treatment_combination), treatment_combination_total = df2$treatment_combination_total, my_mat)
View(my_df)
yates_algo_factorial_exp <- function(trt.comb, trt.comb.total, n, nreplicates){
all_numbers <- c()
previous <- trt.comb.total
new_num <- c()
for (j in 1:n) {
for (i in 1:length(previous)) {
if(i <= length(previous) / 2){
new_num[i] <- previous[2*i - 1] + previous[2*i]
}
else{
temp <- i - (length(previous) / 2)
new_num[i] <- previous[2*temp] - previous[2*temp - 1]
}
}
all_numbers <- append(all_numbers, new_num)
previous <- new_num
}
my_mat <- matrix(data <- all_numbers, nrow = length(previous), ncol = n, byrow = FALSE)
colnames(my_mat) <- sprintf("run_%d", 1:n)
my_df <- data.frame(treatment_combinations = trt.comb, treatment_combination_total = trt.comb.total, my_mat)
return(my_df)
}
my_mat[sprintf("run_%d"), n]
my_mat
my_mat[run_2]
my_mat['run_2']
my_mat[,run_2]
my_mat[,2]
my_mat[,n]
my_mat[,n]^2
yates_algo_factorial_exp <- function(trt.comb, trt.comb.total, n, nreplicates){
all_numbers <- c()
previous <- trt.comb.total
new_num <- c()
for (j in 1:n) {
for (i in 1:length(previous)) {
if(i <= length(previous) / 2){
new_num[i] <- previous[2*i - 1] + previous[2*i]
}
else{
temp <- i - (length(previous) / 2)
new_num[i] <- previous[2*temp] - previous[2*temp - 1]
}
}
all_numbers <- append(all_numbers, new_num)
previous <- new_num
}
my_mat <- matrix(data <- all_numbers, nrow = length(previous), ncol = n, byrow = FALSE)
colnames(my_mat) <- sprintf("run_%d", 1:n)
ss <- my_mat[,n]^2 / (2^n * nreplicates)
my_df <- data.frame(treatment_combinations = trt.comb, treatment_combination_total = trt.comb.total, my_mat, sum_squares = ss)
return(my_df)
}
yates_algo_factorial_exp(c('1', 'k', 'p', 'kp'), c(-10, -4, -10, 24), 2, nreplicates = 4)
new_df <- yates_algo_factorial_exp(c('1', 'k', 'p', 'kp'), c(-10, -4, -10, 24), 2, nreplicates = 4)
View(new_df)
yates_method <- yates_algo_factorial_exp(unique(our_data$treatment_combination), df2$treatment_combination_total, n = 2, nreplicates = 6)
View(yates_method)
summary(two_sq_factorial_anova)
CF
df2[3,]
temp <- df2[3,]
df2[3,] <- df2[4,]
df2[4,] <- temp
View(df2)
yates_method <- yates_algo_factorial_exp(unique(our_data$treatment_combination), df2$treatment_combination_total, n = 2, nreplicates = 6)
View(yates_method)
summary(two_sq_factorial_anova)
swap_data_frame_rows <- function(your_data_frame, row_1, row_2){
temp <- your_data_frame[row_1,]
your_data_frame[row_1,] <- your_data_frame[row_2,]
your_data_frame[row_2,] <- temp
}
df2 <- swap_data_frame_rows(df2, 3, 4)
View(df2)
swap_data_frame_rows <- function(your_data_frame, row_1, row_2){
temp <- your_data_frame[row_1,]
your_data_frame[row_1,] <- your_data_frame[row_2,]
your_data_frame[row_2,] <- temp
return(your_data_frame)
}
df2 <- our_data %>%
group_by(treatment_combination) %>%
summarise(treatment_combination_total = sum(adjusted_response), treatment_combination_total_sq = treatment_combination_total^2)
View(df2)
swap_data_frame_rows <- function(your_data_frame, row_1, row_2){
temp <- your_data_frame[row_1,]
your_data_frame[row_1,] <- your_data_frame[row_2,]
your_data_frame[row_2,] <- temp
return(your_data_frame)
}
df2 <- swap_data_frame_rows(df2, 3, 4)
View(df2)
yates_method <- yates_algo_factorial_exp(unique(our_data$treatment_combination), df2$treatment_combination_total, n = 2, nreplicates = 6)
View(yates_method)
summary(two_sq_factorial_anova)
yates_method <- yates_algo_factorial_exp(df2$treatment_combination, df2$treatment_combination_total, n = 2, nreplicates = 6)
View(yates_method)
library(stringr)
str_sort(c('a', 'ab', 'b'), numeric = TRUE)
str_sort(c('a', 'ab', 'b'), numeric = FALSE)
str_sort(c('a', 'ab', 'b'), numeric = FALSE, decreasing = TRUE)
str_sort(c('a', 'ab', 'b'), numeric = FALSE, decreasing = FALSE)
