geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=100,
filename = "plot2.png",
units = "in",
bg = "white")
df1 %>%
ggplot(aes(x = JAM_score, y = rep(0, length(JAM_score)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 20))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=1000,
filename = "plot2.png",
units = "in",
bg = "white")
df1 %>%
ggplot(aes(x = JAM_score, y = rep(0, length(JAM_score)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=1000,
filename = "plot2.png",
units = "in",
bg = "white")
raw_data %>%
ggplot(aes(x = CUET_score, y = rep(0, length(CUET_score)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
#scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
raw_data %>%
ggplot(aes(x = CUET_score, y = rep(0, length(CUET_score)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(100, 170, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=1000,
filename = "cuet_score_point_plot.png",
units = "in",
bg = "white")
df1 %>%
ggplot(aes(x = JAM_score, y = rep(0, length(JAM_score)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=1000,
filename = "jam_score_point_plot.png",
units = "in",
bg = "white")
df1 %>%
ggplot(aes(x = JAM_score, y = rep(0, length(JAM_score)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#c5f9f9"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
df1 %>%
ggplot(aes(x = JAM_score, y = rep(0, length(JAM_score)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#dbfbfb"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
df1 %>%
ggplot(aes(x = JAM_score, y = rep(0, length(JAM_score)))) +
geom_hline(yintercept = 0, linewidth = 2) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#dbfbfb"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=1000,
filename = "jam_score_point_plot.png",
units = "in",
bg = "white")
df1 %>%
ggplot(aes(x = JAM_score, y = rep(0, length(JAM_score)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(10, 50, by = 10)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#dbfbfb"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=1000,
filename = "jam_score_point_plot.png",
units = "in",
bg = "white")
raw_data %>%
ggplot(aes(x = UG_CGPA, y = rep(0, length(UG_CGPA)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(5, 9, by = 0.5)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
raw_data %>%
ggplot(aes(x = UG_CGPA, y = rep(0, length(UG_CGPA)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(6.5, 9.5, by = 0.5)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
raw_data %>%
ggplot(aes(x = UG_CGPA, y = rep(0, length(UG_CGPA)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(6, 9.5, by = 0.5)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#f9ebc5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=1000,
filename = "ug_cgpa_point_plot.png",
units = "in",
bg = "white")
raw_data %>%
ggplot(aes(x = UG_CGPA, y = rep(0, length(UG_CGPA)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(6, 9.5, by = 0.5)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#fbdbf5"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
raw_data %>%
ggplot(aes(x = UG_CGPA, y = rep(0, length(UG_CGPA)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(6, 9.5, by = 0.5)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#fdf6cb"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
raw_data %>%
ggplot(aes(x = UG_CGPA, y = rep(0, length(UG_CGPA)))) +
geom_hline(yintercept = 0, linewidth = 1) +
geom_point(col = "red", size = 3) +
labs(x = NULL, y = NULL) +
scale_x_discrete(limits = seq(6, 9.5, by = 0.5)) +
theme(panel.background = element_blank(),
plot.background = element_rect(fill = "#cbfddc"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 15))
ggsave(path = "D:\\Programming Languages\\R\\msc_sem_1_practicals\\mahaveer_sir_assignments",
width = 14,
height = 2,
device='png',
dpi=1000,
filename = "ug_cgpa_point_plot.png",
units = "in",
bg = "white")
# median(raw_data$CUET_score)
quantile(raw_data$CUET_score)
# median(raw_data$JAM_score, na.rm = TRUE)
quantile(raw_data$JAM_score, na.rm = TRUE)
?quantile
# median(raw_data$JAM_score, na.rm = TRUE)
quantile(raw_data$JAM_score, na.rm = TRUE, probs = c(0.25, 0.5, 0.75))
# median(raw_data$CUET_score)
quantile(raw_data$CUET_score, probs = c(0.25, 0.5, 0.75))
# median(raw_data$JAM_score, na.rm = TRUE)
quantile(raw_data$JAM_score, na.rm = TRUE, probs = c(0.25, 0.5, 0.75))
# median(raw_data$UG_CGPA)
quantile(raw_data$UG_CGPA, probs = c(0.25, 0.5, 0.75))
# median(raw_data$UG_CGPA)
quantile(raw_data$UG_CGPA, probs = c(0.25, 0.5, 0.75))[1]
# median(raw_data$UG_CGPA)
quantile(raw_data$UG_CGPA, probs = c(0.25, 0.5, 0.75))[1] + 1
var(raw_data$UG_CGPA)
var(raw_data$JAM_score, na.rm = TRUE)
var(raw_data$CUET_score)
var(raw_data[,c(3, 5, 8)])
?mean
coefficient_of_variation <- function(x, na.rm){
return(sd(x, na.rm = na.rm) / mean(x, na.rm = na.rm))
}
coefficient_of_variation(raw_data$CUET_score)
coefficient_of_variation <- function(x, na.rm = FALSE){
return(sd(x, na.rm = na.rm) / mean(x, na.rm = na.rm))
}
coefficient_of_variation(raw_data$CUET_score)
coefficient_of_variation(raw_data$JAM_score, na.rm = TRUE)
coefficient_of_variation(raw_data$UG_CGPA)
cor(raw_data$CUET_score, raw_data$UG_CGPA)
cor(df1$JAM_score, df1$UG_CGPA)
table(raw_data$home_state)
for (i in 1:length(raw_data$home_state)) {
if(raw_data$home_state[i] == "MAHARASTRA"){
raw_data$home_state[i] = "MAHARASHTRA"
}
}
table(raw_data$home_state)
raw_data <- read.csv("D:\\data_sets\\msc_semester_1\\DST_marks_data.csv", stringsAsFactors = TRUE)
table(raw_data$home_state)
table(raw_data$home_state)["WB"]
names(table(raw_data$home_state))
table(raw_data$home_state)
library(dplyr)
# Sample data
data <- data.frame(
state = c("State1", "State2", "State3", "State4", "State5"),
count = c(100, 50, 5, 3, 2)
)
# Define threshold
threshold <- 10
# Group small counts into "Others"
data_grouped <- data %>%
mutate(state = ifelse(count < threshold, "Others", state)) %>%
group_by(state) %>%
summarise(count = sum(count), .groups = 'drop')
# Print the result
print(data_grouped)
# Group small counts into "Others"
data_grouped <- data %>%
mutate(state = ifelse(count < threshold, "Others", state)) %>%
group_by(state) %>%
summarise(count = sum(count))
# Print the result
print(data_grouped)
View(data.frame(table(raw_data$home_state))
View(data.frame(table(raw_data$home_state))
View(data.frame(table(raw_data$home_state)))
home_state_freq <- table(raw_data$home_state)
home_state_freq <- data.frame(table(raw_data$home_state))
View(home_state_freq)
home_state_freq <- data.frame(state = names(table(raw_data$home_state)),
count = table(raw_data$home_state))
View(home_state_freq)
names(table(raw_data$home_state))
table(raw_data$home_state)
value(table(raw_data$home_state))
values(table(raw_data$home_state))
unname(table(raw_data$home_state))
home_state_freq <- data.frame(state = names(table(raw_data$home_state)),
count = unname(table(raw_data$home_state)))
View(home_state_freq)
home_state_freq <- data.frame(table(raw_data$home_state))
View(home_state_freq)
home_state_freq <- colnames("State", "Count")
home_state_freq <- colnames(c("State", "Count"))
View(home_state_freq)
home_state_freq <- data.frame(table(raw_data$home_state))
colnames(home_state_freq) <- c("State", "Count")
View(home_state_freq)
colnames(home_state_freq) <- c("Home.State", "Count")
View(home_state_freq)
df2 <- home_state_freq %>%
mutate(Home.State <- ifelse(Count < 3, "others", Home.State)) %>%
group_by(Home.State) %>%
summarise(Count = sum(Count), .groups = 'drop')
View(df2)
# Sample data
data <- data.frame(
state = c("State1", "State2", "State3", "State4", "State5"),
count = c(100, 50, 5, 3, 2)
)
View(data)
# Define threshold
threshold <- 10
# Group small counts into "Others"
data_grouped <- data %>%
mutate(state = ifelse(count < threshold, "Others", state)) %>%
group_by(state) %>%
summarise(count = sum(count))
# Print the result
print(data_grouped)
# Print the result
View(data_grouped)
df2 <- home_state_freq %>%
mutate(Home.State <- ifelse(Count < 3, "others", Home.State))
View(df2)
df2 <- home_state_freq %>%
mutate(Home.State = ifelse(Count < 3, "others", Home.State)) %>%
group_by(Home.State) %>%
summarise(Count = sum(Count), .groups = 'drop')
View(df2)
df2 <- home_state_freq %>%
mutate(Home.State = ifelse(Count < 3, "others", Home.State))
View(df2)
df2 <- home_state_freq %>%
mutate(temp = ifelse(Count < 3, "others", "Home.State")) %>%
group_by(Home.State) %>%
summarise(Count = sum(Count), .groups = 'drop')
df2 <- home_state_freq %>%
mutate(temp = ifelse(Count < 3, "others", "Home.State"))
View(df2)
data_grouped <- data %>%
mutate(state = ifelse(count < threshold, "Others", state))
# Print the result
View(data_grouped)
# Sample data
data <- data.frame(
state = c("State1", "State2", "State3", "State4", "State5"),
count = c(100, 50, 5, 3, 2)
)
View(data)
# Define threshold
threshold <- 10
data_grouped <- data %>%
mutate(state = ifelse(count < threshold, "Others", state))
# Print the result
View(data_grouped)
home_state_freq <- data.frame(table(raw_data$home_state))
colnames(home_state_freq) <- c("State", "Count")
View(home_state_freq)
df2 <- home_state_freq %>%
mutate(State = ifelse(Count < 3, "others", "State")) %>%
group_by(State) %>%
summarise(Count = sum(Count), .groups = 'drop')
View(df2)
df2 <- home_state_freq %>%
mutate(State = ifelse(Count < 3, "others", State)) %>%
group_by(State) %>%
summarise(Count = sum(Count), .groups = 'drop')
View(df2)
a <- 1:10
a <- ifelse(1:10 < 5, "ananda", "xyz")
a
a <- 1:10
a <- ifelse(1:10 < 5, "ananda", a)
a
home_state_freq %>%
mutate(State = ifelse(Count < 3, "others", State))
home_state_freq <- data.frame(table(raw_data$home_state))
home_state_freq %>%
mutate(State = ifelse(Count < 3, "others", State))
home_state_freq <- data.frame(table(raw_data$home_state))
colnames(home_state_freq) <- c("State", "Count")
View(home_state_freq)
home_state_freq %>%
mutate(State = ifelse(Count < 3, "others", State))
states <- ifelse(home_state_freq$Count < 3, "others", home_state_freq$State)
states
# Example vector
values <- c(5, 10, 15, 3, 20)
# Define threshold
threshold <- 10
# Use ifelse to change values
new_values <- ifelse(values < threshold, "Below Threshold", values)
# Print the result
print(new_values)
data_grouped <- data %>%
mutate(state = ifelse(count < threshold, "Others", state)) %>%
group_by(state)
# Print the result
View(data_grouped)
# Group small counts into "Others"
data_grouped <- data %>%
mutate(state = ifelse(count < threshold, "Others", state)) %>%
group_by(state) %>%
summarise(count = sum(count))
# Print the result
View(data_grouped)
# Sample data
data <- data.frame(
state = c("State1", "State2", "State3", "State4", "State5"),
count = c(100, 50, 5, 3, 2)
)
data_grouped <- data %>%
mutate(state = ifelse(count < threshold, "Others", state))
# Print the result
View(data_grouped)
home_state_freq <- data.frame(table(raw_data$home_state))
colnames(home_state_freq) <- c("State", "Count")
class(home_state_freq$State)
home_state_freq$State <- as.character(home_state_freq$State)
class(home_state_freq$State)
View(home_state_freq)
df2 <- home_state_freq %>%
mutate(State = ifelse(Count < 3, "others", State)) %>%
group_by(State) %>%
summarise(Count = sum(Count), .groups = 'drop')
View(df2)
df2$State <- ifelse(State == "UP", "UTTAR PRADESH", State)
df2$State <- ifelse(df2$State == "UP", "UTTAR PRADESH", df2$State)
View(df2)
df2$State <- ifelse(df2$State == "WB", "WEST BENGAL", df2$State)
View(df2)
df2$State <- tolower(df2$State)
View(df2)
order(df2$Count)
order(df2$Count, decreasing = TRUE)
df2 <- df2[,order(df2$Count, decreasing = TRUE)]
df2 <- df2[order(df2$Count, decreasing = TRUE),]
View(df2)
df2$State <- toupper(df2$State)
df2 <- df2[order(df2$Count, decreasing = TRUE),]
View(df2)
df3 <- as.character(raw_data$home_state)
View(df3)
dim(df3)
df3 <- raw_data$home_state
View(df3)
df3 <- raw_data[,2]
View(df3)
df3 <- as.character(raw_data[,2])
View(df3)
raw_data <- read.csv("D:\\data_sets\\msc_semester_1\\DST_marks_data.csv", stringsAsFactors = TRUE)
raw_data <- raw_data[,-1]
df3 <- as.character(raw_data[,2])
View(df3)
dim(df3)
